//------------------------------------------------------------------------------------------------//
//                                                                                                //
//                         : p a c k a g i n g / b u i l d . g r a d l e                          //
//                                                                                                //
//------------------------------------------------------------------------------------------------//
//
// This "packaging" sub-project aims to manage the packaging of Audiveris for all supported OSes.
//
// It must be run on the same operating system as the one being targeted.
//
//--------------------------------------------------------------------------------------------------

plugins {
    // Mainly for the clean task
    id 'base'

    // Not really needed, temporarily used just to printout tasks tree
    id 'org.barfuin.gradle.taskinfo' version '2.2.0'

    // Plugin which provides the jpackage task
    id 'org.panteleyev.jpackageplugin' version '1.6.1'
}

// Pointers to the 'app' sibling sub-project
def app     = project(':app')
def appDir  = app.projectDir

tasks.register('checkInstallerType') {
    description "Checks if the installer type has been provided"
    doLast {
        if (!project.hasProperty('installerType') || project.ext.installerType == null) {
            throw new RuntimeException("Error: No installerType is provided!")
        }
    }
}

tasks.register('collectJars', Copy) {
    description "Copies the application jar and all external jars it depends upon"
    doFirst {
        mkdir('build/jars')
    }

    into 'build/jars'
    from app.tasks.jar
    from app.sourceSets.main.runtimeClasspath
}

tasks.register('customJre', Exec) {
    description "Assembles a custom JRE"
    onlyIf('custom-jre folder does not exist yet') {
        !file('build/custom-jre').exists()
    }
    commandLine "jlink",\
        "--output", "build/custom-jre",\
        "--add-modules", "java.base,java.datatransfer,java.desktop,java.xml,java.naming,jdk.zipfs"
}

// Configure the jpackage task
tasks.jpackage {
    dependsOn 'checkInstallerType'
    dependsOn ':app:classes'
    dependsOn 'customJre'
    dependsOn 'collectJars'

    input               = "build/jars"
    destination         = "build/dist"
    verbose             = true

    runtimeImage        = "build/custom-jre"

    appName             = app.ext.programName
    vendor              = "audiveris.org"
    appDescription      = "Optical Music Recognition"
    appVersion          = app.version
    mainJar             = "${app.ext.programId}.jar"
    mainClass           = app.ext.mainClass

    fileAssociations    = ["dev/omr.properties"]
    javaOptions         = ["--add-exports=java.desktop/sun.awt.image=ALL-UNNAMED",
                           "-Dfile.encoding=UTF-8",
                           "-Xms512m",                    
                           "-Xmx1024m"]

    windows {
        icon = "$appDir/res/icon-256.ico"   // Path to the icon of the application package
        winConsole = true                   // Create a console launcher (Useful for errors)
        winDirChooser = true                // Let the user choose the installation directory
        winMenu = true                      // Add a Start Menu shortcut
        winPerUserInstall = true            // Perform an install on a per-user basis
        winShortcut = true                  // Create a desktop shortcut
        winShortcutPrompt = true            // Let the user decide on shortcuts
    }

    mac {
        // TODO: add needed statements
        icon = "???"
        javaOptions = ["--add-exports java.desktop/com.apple.eawt=ALL-UNNAMED"]
    }

    linux {
        // TODO: add needed statements
        icon = "$appDir/res/icon-256.png"   // Path to the icon of the application package
        linuxShortcut = true                // Create a shortcut for the application
    }

    if (project.hasProperty('installerType') && project.ext.installerType != null) {
        type = "$project.ext.installerType" // The type of installer to create

        def installerFile = "build/dist/${app.ext.programName}-${app.version}.$project.ext.installerType"
        println "installerFile: $installerFile"
        outputs.file file("$installerFile")
    }
}
