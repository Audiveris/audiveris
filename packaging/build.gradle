//------------------------------------------------------------------------------------------------//
//                                                                                                //
//                         : p a c k a g i n g / b u i l d . g r a d l e                          //
//                                                                                                //
//------------------------------------------------------------------------------------------------//
//
// This "packaging" sub-project aims to manage the packaging of Audiveris for all supported OSes.
// It must be run on the same operating system as the one being targeted.
//
// 'installerType' is an optional parameter, that can be specified using the Gradle argument:
//      -PinstallerType=XXX
// The valid values for XXX are:
// - for Windows: DEFAULT, EXE or MSI
// - for macOS: DEFAULT, DMG or PKG
// - for Linux: DEFAULT, DEB or RPM
// If not provided, the DEFAULT type is chosen (EXE for Windows, DMG for macOS, DEB for Linux)
//
// For all OSes, 'jlink' is required
// Windows requires 'WiX' 3 or higher
// Linux requires 'fakeroot'
// macOS requires '[image]magick', 'iconutil', 'lipo'
//
// The outputs are in the 'build' folder:
// - build/jars:        Audiveris.jar, plus all the dependencies .jar files
// - build/custom-jre:  A shrunk copy of the host Java runtime environment
// - build/iconset:     Temporary icons for macOS
// - build/dist:        The installer(s) built
//--------------------------------------------------------------------------------------------------

plugins {
    // Mainly for the clean task
    id 'base'

    // Plugin which provides the jpackage task
    id 'org.panteleyev.jpackageplugin' version '1.6.1'
}

import org.panteleyev.jpackage.ImageType

// Pointers to the 'app' sibling sub-project
def app     = project(':app')
def appDir  = app.projectDir
def rootDir = getRootDir()

tasks.register('collectJars', Copy) {
    description "Copies the application jar and all external jars it depends upon"
    dependsOn ':app:classes'
    onlyIf('jars folder does not exist yet') {
        !file('build/jars').exists()
    }
    doFirst {
        mkdir('build/jars')
    }

    into 'build/jars'
    from app.tasks.jar
    from app.sourceSets.main.runtimeClasspath
}

tasks.register('customJre', Exec) {
    description "Assembles a custom JRE"
    onlyIf('custom-jre folder does not exist yet') {
        !file('build/custom-jre').exists()
    }
    commandLine "jlink",\
        "--output", "build/custom-jre",\
        "--no-header-files",\
        "--no-man-pages",\
        "--strip-debug",\
        "--add-modules", "java.base,java.datatransfer,java.desktop,java.xml,java.naming,jdk.zipfs,jdk.crypto.ec"
}

tasks.register('macConvertIcons') {
    description "Converting PNG icon to ICNS format"
    doFirst {
        println "Creating .icns file from source icon..."
        mkdir('build/iconset')
    }

    doLast {
        ///def src = "$appDir/res/icon-256.png"
        def src = "$appDir/src/main/java/org/audiveris/omr/ui/resources/icon-256.png"

        // Generate different icon sizes
        // Including retina displays (@2x)
       [16, 32, 64, 128, 256, 512].each {size ->
            exec {
                commandLine "magick", src, "-resize", "${size}x${size}",\
                "build/iconset/icon_${size}x${size}.png"
            }
           def dbl = size * 2
           exec {
               commandLine "magick", src, "-resize", "${dbl}x${dbl}",\
                "build/iconset/icon_${size}x${size}@2x.png"
           }
        }

        // Just to inspect the created files
        exec {
            commandLine "ls", "-la", "build/iconset/"
        }
/*
        // Convert iconset to icns
        exec {
            commandLine "iconutil",\
                    "--convert", "icns",\
                    "--output", "build/Audiveris.icns",\
                    "build/iconset"
        }
 */
        // Use an empty "build/Audiveris.icns" file
        exec {
            commandLine "touch", "build/Audiveris.icns"
        }
        exec {
            commandLine "ls", "-la", "build"
        }
    }

    doLast {println "Icon successfully created at build/Audiveris.icns"}
}

// Configure the jpackage task
tasks.jpackage {
    dependsOn 'customJre'
    dependsOn 'collectJars'

    input               = "build/jars"
    destination         = "build/dist"
    verbose             = true

    runtimeImage        = "build/custom-jre"

    appName             = app.ext.programName
    vendor              = "audiveris.org"
    licenseFile         = rootDir.toPath().resolve('LICENSE')
    appDescription      = "Optical Music Recognition"
    appVersion          = app.version
    mainJar             = "${app.ext.programId}.jar"
    mainClass           = app.ext.mainClass

    fileAssociations    = ["dev/omr.properties"]
    javaOptions         = ["--add-exports=java.desktop/sun.awt.image=ALL-UNNAMED",
                           "-Dfile.encoding=UTF-8",
                           "-Xms512m",
                           "-Xmx1024m"]

    // Chosen installer type, if any
    ImageType installerType = null
    if (project.hasProperty('installerType')) {
        try {
            installerType = ImageType.valueOf(project.property('installerType').toString().toUpperCase())
            println "installerType: " + installerType
        } catch (IllegalArgumentException ex) {
            println "Illegal installerType: " + project.property('installerType')
            throw new RuntimeException("Error: installerType should be one of " + ImageType.values())
        }
    }

    windows {
        icon = "$appDir/res/icon-256.ico"   // Path to the icon of the application package
        winDirChooser = true                // Let the user choose the installation directory
        winMenu = true                      // Add a Start Menu shortcut
        winShortcutPrompt = true            // Let the user decide on shortcuts
        winShortcut = true                  // Create a desktop shortcut
        ///winConsole = true                   // Create a console launcher (Useful only for errors)
        ///winPerUserInstall = true            // Perform an install on a per-user basis (vs system basis)

        // Check validity of installerType for Windows
        if (installerType != null) {
            if (installerType != ImageType.DEFAULT && installerType != ImageType.EXE && installerType != ImageType.MSI) {
                throw new RuntimeException("Error: Illegal installerType for Windows: " + installerType)
            }
            type = installerType
        } else {
            type = ImageType.MSI
        }
    }

    mac {
        dependsOn 'macConvertIcons'
        icon = "build/Audiveris.icns"

        javaOptions = ["--add-exports java.desktop/com.apple.eawt=ALL-UNNAMED"]
        macPackageIdentifier = "org.audiveris.app"
        macPackageName = app.ext.programName

        // Check validity of installerType for macOS
        if (installerType != null) {
            if (installerType != ImageType.DEFAULT && installerType != ImageType.DMG && installerType != ImageType.PKG) {
                throw new RuntimeException("Error: Illegal installerType for macOS: " + installerType)
            }
            type = installerType
        }
    }

    linux {
        icon = "$appDir/res/icon-256.png"   // Path to the icon of the application package
        linuxShortcut = true                // Create a shortcut for the application

        // Check validity of installerType for Linux
        if (installerType != null) {
            if (installerType != ImageType.DEFAULT && installerType != ImageType.DEB && installerType != ImageType.RPM) {
                throw new RuntimeException("Error: Illegal installerType for Linux: " + installerType)
            }
            type = installerType
        }
    }
}
