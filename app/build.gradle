//------------------------------------------------------------------------------------------------//
//                                                                                                //
//                                : a p p / b u i l d . g r a d l e                               //
//                                                                                                //
//------------------------------------------------------------------------------------------------//
//
// Audiveris root project.
//
// Sub-projects:
//      - app               : The application
//      - schemas           : The documentation on .omr files
//      - windows-installer : The installer for Windows OS
//
// Sub-modules:
//      - dev/flathub       : The Linux flatpak
//
//--------------------------------------------------------------------------------------------------

plugins {
    id 'application'

    // Needed to retrieve all dependencies for flatpak
    id 'io.github.jwharm.flatpak-gradle-generator' version '1.1.0'
}

// Name of host OS
ext.hostOSName   = System.getProperty('os.name').toLowerCase()\
                     .startsWith('mac os x') ? 'macosx' :\
                     System.getProperty('os.name').split(' ')[0].toLowerCase()

// Architecture of host OS
// This mapping is required to adapt values of os.name and os.arch
// to the conventions used by Javacpp's dependencies
ext.hostOSArch   = ["i386":"x86", "i486":"x86", "i586":"x86", "i686":"x86", "x86":"x86",
                    "amd64":"x86_64", "x86-64":"x86_64", "x86_64":"x86_64", 
                    "arm":"armhf",
                    "aarch64":"arm64"]\
                   [System.getProperty('os.arch').toLowerCase()]

// Full host OS identification as "name-arch"
ext.hostOS       = "${project.ext.hostOSName}-${project.ext.hostOSArch}"
println "hostOS: ${project.ext.hostOS}"

// Handling of Java version
ext.theMinJavaVersion = project.property('theMinJavaVersion')
println "theMinJavaVersion: $theMinJavaVersion"

java {
    sourceCompatibility = JavaLanguageVersion.of(theMinJavaVersion)
}

project.version = '5.4-alpha'

// Central location for the specific versions of tesseract dependencies
ext.jcppVersion     = '1.5.9'
ext.leptVersion     = '1.83.0'
ext.tessVersion     = '5.3.1'

ext.tessdataTag     = project.property('theTessdataTag')
println "theTessdataTag: $tessdataTag"

ext.programName     = rootProject.name
ext.programId       = rootProject.name.toLowerCase()
ext.programVersion  = "$project.version"
ext.companyName     = "$programName Ltd."
ext.companyId       = "${programName}Ltd"

// Name of Java main class. 
// The caller may have set the property on the gradle command line via a -PmainClass=foobar
if (project.hasProperty('mainClass')) {
    println "property mainClass:" + project.property('mainClass')
    ext.mainClass = project.property('mainClass')
} else {
    ext.mainClass = ext.programName
}

application {
    mainClass.set("$project.ext.mainClass")
    
    // Needed to circumvent the limitations brought by Java 9 and above (the JigSaw cuts)
    applicationDefaultJvmArgs = ["--add-exports=java.desktop/sun.awt.image=ALL-UNNAMED"]
}

// Perhaps no longer needed?
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Useful for turning on deprecation warnings
// Just uncomment the appropriate option
allprojects {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xlint:deprecation"
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

// Run default configuration.
// Heap size (and other stuff) can be modified via a 'jvmLineArgs' on gradle command line
run {
    minHeapSize = '512m'
    maxHeapSize = '1g'

    // Retrieve JVM arguments from jvmLineArgs property if any
    if (project.hasProperty("jvmLineArgs")) {
        println "run. jvmLineArgs: ${jvmLineArgs}"
        jvmArgs jvmLineArgs.split(',')
    }

    // Retrieve CLI arguments from cmdLineArgs property if any
    if (project.hasProperty("cmdLineArgs")) {
        println "run. cmdLineArgs: ${cmdLineArgs}"
        args cmdLineArgs.split(',')
    }
}

repositories {
    if (project.hasProperty("isFlatpak")) {
        println "repositories. isFlatpak set"
        maven { // Only the offline repository
            name = 'Offline repository for flatpak'
            url = '../flatpak/build/dependencies' 
        }
    } else {
        mavenCentral()

        maven { // Required to obtain non-free JAI
            name = 'JBoss repository'
            url = 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases'
        }

        maven { // Required for JAI Core 1.1.3
            name = 'SpringSource Enterprise Bundle Repository - External Bundle Releases'
            url = 'https://repository.springsource.com/maven/bundles/external'
        }

        mavenLocal()

        ///flatDir(dirs: 'dev/externals') // for libraries not in any other repository
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir layout.buildDirectory.file("generated-src")
        }
        resources {
            srcDir 'src/main/java'   // Needed for BSAF use of properties
            srcDir 'dev/icons'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    implementation(
        [group: 'org.kohsuke', name: 'github-api', version: '1.301'],
        [group: 'args4j', name: 'args4j', version: '2.33'],
        [group: 'org.jdesktop.bsaf', name: 'bsaf', version: '1.9.2'],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.35'],
        [group: 'net.jcip', name: 'jcip-annotations', version: '1.0'],
        [group: 'org.bushe', name: 'eventbus', version: '1.4'],
        [group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'],
        [group: 'com.jgoodies', name: 'jgoodies-forms', version: '1.9.0'],
        [group: 'com.jgoodies', name: 'jgoodies-looks', version: '2.7.0'],
        [group: 'javax.media', name: 'jai-core', version: '1.1.3'],
        [group: 'net.imagej', name: 'ij', version: '1.53j'],
        [group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.27'],
        [group: 'org.audiveris', name: 'proxymusic', version: '4.0.2'],
        [group: 'org.jgrapht', name: 'jgrapht-core', version: '1.5.1'],
        [group: 'org.jfree', name: 'jfreechart', version: '1.5.3'],
        [group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13.2'],
        [group: 'gov.nist.math', name: 'jama', version: '1.0.3'],
        [group: 'org.reflections', name: 'reflections', version: '0.10.2'],
        [group: 'org.bytedeco', name: 'javacpp', version: jcppVersion],
        [group: 'org.bytedeco', name: 'leptonica', version: "${leptVersion}-${jcppVersion}"],
        [group: 'org.bytedeco', name: 'tesseract', version: "${tessVersion}-${jcppVersion}"],
        [group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: '1.4.0'],
        [group: 'org.apache.directory.studio', name: 'org.apache.commons.io', version: '2.4'],
        [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'],
        [group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'],
        [group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.1']
    )

    runtimeOnly(
        [group: 'org.bytedeco', name: 'leptonica', version: "${leptVersion}-${jcppVersion}", classifier: "${project.ext.hostOS}"],
        [group: 'org.bytedeco', name: 'tesseract', version: "${tessVersion}-${jcppVersion}", classifier: "${project.ext.hostOS}"]
    )

    testImplementation(
        [group: 'junit', name: 'junit', version: '4.13.2'],
        [group: 'org.jgrapht', name: 'jgrapht-ext', version: '1.5.1']
    )
}

// Trick for Linux to include 'arm64' architecture in addition to 'x86_64'
if (hostOS == "linux-x86_64") {
    dependencies {
        runtimeOnly(
            [group: 'org.bytedeco', name: 'leptonica', version: "${leptVersion}-${jcppVersion}", classifier: "linux-arm64"],
            [group: 'org.bytedeco', name: 'tesseract', version: "${tessVersion}-${jcppVersion}", classifier: "linux-arm64"]
        )
    }
}

// Generate application.jar
jar {
    // override default output archive name
    archiveFileName = "${programId}.jar"

    exclude ("**/doc-files/**")

    destinationDirectory = file('build/jar')

    // copy resources into the destination jar
    from(file('res')) {
        into 'res'
    }

    manifest {
        attributes 'Built-By': project.ext.companyName
        attributes 'Specification-Title': project.ext.programName
        attributes 'Specification-Vendor': project.ext.companyName
        attributes 'Specification-Version': project.version
        attributes 'Implementation-Version': project.version
    }
}

// Retrieve the abbreviated hash for the latest commit from Git
task git_build (type: Exec) {
    commandLine "git rev-parse --short HEAD".split(' ')
    standardOutput = new ByteArrayOutputStream()

    doLast {
        project.ext.programBuild = standardOutput.toString().replaceAll('\n', '')
    }
}

// Generate a 'ProgramId.java' source file, based on Git data
task generateProgramId {
    group "build"
    description "Generates ProgramId source"
    dependsOn('git_build')
    doLast {
        def outputDir = layout.buildDirectory.file("generated-src/org/audiveris/omr").get().asFile
        outputDir.exists() || outputDir.mkdirs()
        def className = "ProgramId"
        def gSrc = new File(outputDir, "${className}.java")
        gSrc.write("package org.audiveris.omr;\n\n")
        gSrc.append("/**\n * Class {@code $className} provides full program identification.\n")
        gSrc.append(" * This code has been automatically generated by Gradle.\n */\n")
        gSrc.append("public abstract class $className {")

        ["company_name", "company_id", "program_name", "program_id", "program_version", "program_build", "tessdata_tag"].each { str ->
            def strParts = str.split("_")
            def propName = strParts[0] + strParts[1].capitalize()
            gSrc.append("\n    /** Precise ${strParts[0]} ${strParts[1]}: {@value} */")
            gSrc.append("\n    public static final String ${str.toUpperCase()} = \"${project.ext."$propName"}\";\n")
        }

        gSrc.append("}\n")
    }
}
compileJava.dependsOn("generateProgramId")

// Customization of start scripts to force a check of Java version at run time
tasks.withType(CreateStartScripts).configureEach {
    applicationName = rootProject.name
    doFirst {
        // Copy our own templates while updating THE_MIN_JAVA_VERSION token
        copy {
            into layout.buildDirectory
            filter { line -> line.replaceAll('THE_MIN_JAVA_VERSION', theMinJavaVersion) }
            from 'dev/scripts/custom-unixStartScript.txt'
            from 'dev/scripts/custom-windowsStartScript.txt'
        }
    }

    // Make the script generators use our templates
    unixStartScriptGenerator.template = resources.text.fromFile(layout.buildDirectory.file("custom-unixStartScript.txt"))
    windowsStartScriptGenerator.template = resources.text.fromFile(layout.buildDirectory.file("custom-windowsStartScript.txt"))
}

// Tell gradle to log standard output and error streams when running tests
test {
    testLogging.showStandardStreams = true
}

// Defining 'debug' task allows to set its arguments later
task debug (type: JavaExec) {
    dependsOn('classes')
    mainClass = "$project.ext.mainClass"
    classpath = sourceSets.main.runtimeClasspath
    debug true
}

//---------------
// Documentation
//---------------

// Generate a PDF version of handbook
task deletePdf (type: Delete) {
    delete "build/pdf"
}

task handbookPdf (type: Exec) {
    group "documentation"
    description "Generates PDF version of handbook from GitHub"
    dependsOn('deletePdf')
    workingDir = projectDir
    commandLine 'sh', 'docs/pdf/pdf-build.sh'
}

task handbookPdfLocalhost (type: Exec) {
    group "documentation"
    description "Generates PDF version of handbook from local host"
    dependsOn('deletePdf')
    workingDir = projectDir
    commandLine 'sh', 'docs/pdf/pdf-build.sh', 'localhost'
}

javadoc {
    title = "${project.ext.programName}-${project.version} API"
    options.overview('src/main/java/overview.html')

    // Copy images from src to javadoc hierarchy
    doLast {
        copy {
            from 'src/main/java'
            include '**/*.png'
            into layout.buildDirectory.file("docs/javadoc")
        }
    }
}

// To avoid too many warnings in building javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc).tap {
            configureEach {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

//---------
// Flatpak
//---------

// Configure the flatpakGradleGenerator plugin task
def depsFile = file('build/dependencies.json')
tasks.flatpakGradleGenerator {
    description("Collect all dependencies for Flatpak")
    outputFile = depsFile
    downloadDirectory = '../app/build/dependencies'

    outputs.file(depsFile)
    doFirst { println "app. Generating dependencies" }
    doLast { println "app. Dependencies generated" }
}

configurations {
    sharedConfiguration {
        canBeResolved = false
    }
}

artifacts {
    sharedConfiguration(depsFile)
}

//-----------
// Utilities
//-----------

// Ability to include private tasks (such as save)
fileTree("$projectDir/private").include('*.gradle').each { file ->
     apply from: file
}

// Utility task to print out head templates
task printTemplates (type: JavaExec) {
    description("Print out head templates with various sizes")
    dependsOn('classes')
    mainClass = "org.audiveris.omr.image.TemplateFactory"
    classpath = sourceSets.main.runtimeClasspath

    if (project.hasProperty("cmdLineArgs")) {
        println "printTemplates. cmdLineArgs: ${cmdLineArgs}"
        args(cmdLineArgs.split())
    }
}
